-------------------cobfigurar los datos----------------------------
$ git config --global user.name "John Doe"
$ git config --global user.email johndoe@example.com
-----------------------------------------------------------------------------------
Para subir un archivo a github se debe utilizar los comandos
git branch -M main

Luego

git remote add origin + la url del repocitorio

luego

git push -u origin main

 * encaso de erro 

git pull origin main

Luego

git pull origin main --allow-unrelated-histories

Luego 

git push origin main

---------------Comando para ver datos personales--------------------

git config -l

---------comando para hacer una llave publica y privada---------------

ssh-keygen -t rsa -b 4096 -C "navarrocorreajuancamilo@gmail.com"

(las contraseñas se guardan en .ssh)
gi
Luego poner dar enter y luego poner contraseña espaceada

Despues se revisa el servidor de llaves este prendido con el siguiente
comando.

eval $(ssh-agent -s)

Esto dara un agent pid + number

ahora ponemos la llave publica en el home del pc con el siguiente
comando.

ssh-add ~/.ssh/id_rsa

Despues de haber pegado la llave ssh en git hub, nos vamos a la
carpeta del repocitorio en nuestro pc y cambiamos la url ssh

git remote set-url origin + la url de ssh del repocitorio.

para verificar que todo este bien ponemos el siguiente comando

git remote -v


---Para traer la informacion del servidor de github y estar--
------------------------actualizado--------------------------

traesmos los datos con 

git pull (este comando solo se hace una solaves en el pc)
y damos en yes

Luego ponemos 

git pull origin main 

para verse si estan actualizados los datos

y Luego podemos haceer commit (Tambien se usa antes de hacer 
commit)

-------------Comando para Mostrar las ramas----------------------

git log --all --graph 

o

git log --all --graph --decorate --oneline

-----------Comando para renombrar un comando-----------------------

alias + (El nuevo nombre) + entre comillas el comando que quieras
Ejemplo: alias ramas="git log --all --graph --decorate --oneline"


--------------------Comando para hacer una tag----------------

los tag ponen que tipo de vercion es ejemplo v0.1

 git tag -a v0.1 -m "Actualizacion del archivo"

para enviar los tag a github

git push origin --tags

para mirar todos los tags

git show-ref --tags
o 
git tag 

Para eliminar los tags

git tag -d + el Nombre del tag

Pra eliminar los tags del github

git tag origin :refs/tags/ + Nombre del tag


---------------------------------Comando para clonar-------------------------------

git clone + url del repocitorio 

--------comando para una rama que traiga los cambios recientes del original---------

Nota: el git upstream main es como el git origin main
con git remote -v podemos ver push y fetch

hacemos git remote add upstream + la url del repocitorio clonado o la fuente nueva

luego se podrian hacer git pull de cualquier rama hacia el repocitorio clonado 
tambien se pueden hacer git push enviar la informacion de nuestro repocitorio

----------------Para hacer un deployment--------------------
simplemente se hacen cambios desde la pagina de git, le das editar archivo y listo

para ignorar una archivo binario hacemos un archi para ignorar llamado: . git ignore

---------------------------Nombre para el editor de readme-------------------------
Pandao
link: https://pandao.github.io/editor.md/en.html

--------------------------Comando rebase--------------------------
Este comando espara hacerlo de manera local yaque puede ser muy peligroso
en el remoto, puede confundir.

Dos ramas main y experimento 

desde experimento se trae toda la informacion de main a esta rama con este comando

git rebase main 

ahora la rama experimento esta actualiza con los cambios de main, pero no hay una 
historia como tal
